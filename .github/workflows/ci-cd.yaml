name: Build & Push to Artifact Registry (Development)

on:
  push:
    branches:
      - gcp-devtest

env:
  IMAGE_BASE: us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO }}
  COMMIT_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: development

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud using WIF
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ secrets.ARTIFACT_DOMAIN }}

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build docker-compose images (web, workers)
        run: docker-compose build web workers

      - name: Build IgnitedAPI_Scheduler
        run: |
          docker build -t $IMAGE_BASE/${{ secrets.IGNITEDAPI_SCHEDULER }} . \
            --build-arg CMD="node workers/scheduled/poc-warning.js"

      - name: Build Ignited_Chat_Staging
        run: |
          docker build -t $IMAGE_BASE/${{ secrets.IGNITED_CHAT_STAGING }} . \
            --build-arg CMD="npm start"

      - name: Pull and retag previous latest as 'previous'
        continue-on-error: true
        run: |
          for IMAGE in ${{ secrets.IGNITEDAPI }} ${{ secrets.IGNITEDAPI_WORKERS }} ${{ secrets.IGNITEDAPI_SCHEDULER }} ${{ secrets.IGNITED_CHAT_STAGING }}; do
            if docker pull $IMAGE_BASE/$IMAGE:latest; then
              docker tag $IMAGE_BASE/$IMAGE:latest $IMAGE_BASE/$IMAGE:previous
              docker push $IMAGE_BASE/$IMAGE:previous
            else
              echo "No previous image found for $IMAGE, skipping tagging as previous"
            fi
          done

      - name: Tag and push all new images as 'latest'
        run: |
          for IMAGE in ${{ secrets.IGNITEDAPI }} ${{ secrets.IGNITEDAPI_WORKERS }} ${{ secrets.IGNITEDAPI_SCHEDULER }} ${{ secrets.IGNITED_CHAT_STAGING }}; do
            echo "Building $IMAGE before tagging..."
            docker build -t $IMAGE_BASE/$IMAGE . --build-arg CMD="npm start" || echo "Build skipped if already done"
            
            echo "Tagging $IMAGE as latest..."
            docker tag $IMAGE_BASE/$IMAGE $IMAGE_BASE/$IMAGE:latest
            
            echo "Pushing $IMAGE:latest..."
            docker push $IMAGE_BASE/$IMAGE:latest
          done
          
      - name: Debug image path setup
        run: |
          echo "IMAGE_BASE=${{ secrets.ARTIFACT_DOMAIN }}/${{ secrets.PROJECT_ID }}/${{ secrets.REPO }}"
      
      - name: Cleanup old images from Artifact Registry
        run: |
          set -e
          echo "Starting deep cleanup for images..."
      
          IMAGE_NAMES=("IGNITEDAPI" "IGNITEDAPI_WORKERS" "IGNITEDAPI_SCHEDULER" "IGNITED_CHAT_STAGING")
      
          for IMAGE in "${IMAGE_NAMES[@]}"; do
            echo ""
            echo "Cleaning image: $IMAGE"
            FULL_PATH="${IMAGE_BASE}/${IMAGE}"
      
            echo "Listing digests for: $FULL_PATH"
            ALL_DIGESTS=$(gcloud artifacts docker images list $FULL_PATH \
              --include-tags \
              --sort-by="~createTime" \
              --format="value(version)")
      
            echo "All digests:"
            echo "$ALL_DIGESTS"
      
            # Pick 3 most recent digests to keep
            DIGESTS_TO_KEEP=$(echo "$ALL_DIGESTS" | head -n 3)
      
            echo "Keeping digests:"
            echo "$DIGESTS_TO_KEEP"
      
            for DIGEST in $ALL_DIGESTS; do
              if echo "$DIGESTS_TO_KEEP" | grep -q "$DIGEST"; then
                echo "Skipping $DIGEST (one of the latest 3)"
                continue
              fi
      
              TAGS=$(gcloud artifacts docker tags list "${FULL_PATH}@${DIGEST}" --format="value(tag)" || echo "")
              if echo "$TAGS" | grep -Eq "latest|previous"; then
                echo "Skipping $DIGEST (protected tag)"
                continue
              fi
      
              echo "Deleting digest $DIGEST..."
              gcloud artifacts docker images delete "${FULL_PATH}@${DIGEST}" --quiet || true
            done
          done
