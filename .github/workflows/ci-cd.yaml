name: Build & Push to Artifact Registry (Development)

on:
  push:
    branches:
      - gcp-devtest

env:
  IMAGE_BASE: us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO }}
  COMMIT_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: development

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud using WIF
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ secrets.ARTIFACT_DOMAIN }}

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build images using docker-compose (IGNITEDAPI, WORKERS)
        run: docker-compose build web workers

      - name: Build Scheduler and Chat images (custom builds)
        run: |
          docker build -t $IMAGE_BASE/${{ secrets.IGNITEDAPI_SCHEDULER }} . --build-arg CMD="node workers/scheduled/poc-warning.js"
          docker build -t $IMAGE_BASE/${{ secrets.IGNITED_CHAT_STAGING }} . --build-arg CMD="npm start"

      - name: Retag existing 'latest' as 'previous' if exists
        continue-on-error: true
        run: |
          for IMAGE in ${{ secrets.IGNITEDAPI }} ${{ secrets.IGNITEDAPI_WORKERS }} ${{ secrets.IGNITEDAPI_SCHEDULER }} ${{ secrets.IGNITED_CHAT_STAGING }}; do
            docker pull $IMAGE_BASE/$IMAGE:latest && docker tag $IMAGE_BASE/$IMAGE:latest $IMAGE_BASE/$IMAGE:previous && docker push $IMAGE_BASE/$IMAGE:previous || echo "No previous image for $IMAGE"
          done

      - name: Tag new builds as 'latest' and push
        run: |
          docker tag $IMAGE_BASE/${{ secrets.IGNITEDAPI }} $IMAGE_BASE/${{ secrets.IGNITEDAPI }}:latest
          docker tag $IMAGE_BASE/${{ secrets.IGNITEDAPI_WORKERS }} $IMAGE_BASE/${{ secrets.IGNITEDAPI_WORKERS }}:latest
          docker tag $IMAGE_BASE/${{ secrets.IGNITEDAPI_SCHEDULER }} $IMAGE_BASE/${{ secrets.IGNITEDAPI_SCHEDULER }}:latest
          docker tag $IMAGE_BASE/${{ secrets.IGNITED_CHAT_STAGING }} $IMAGE_BASE/${{ secrets.IGNITED_CHAT_STAGING }}:latest

          docker push $IMAGE_BASE/${{ secrets.IGNITEDAPI }}:latest
          docker push $IMAGE_BASE/${{ secrets.IGNITEDAPI_WORKERS }}:latest
          docker push $IMAGE_BASE/${{ secrets.IGNITEDAPI_SCHEDULER }}:latest
          docker push $IMAGE_BASE/${{ secrets.IGNITED_CHAT_STAGING }}:latest

      - name: Cleanup old untagged digests (keep only latest & previous)
        continue-on-error: true
        run: |
          for IMAGE in ${{ secrets.IGNITEDAPI }} ${{ secrets.IGNITEDAPI_WORKERS }} ${{ secrets.IGNITEDAPI_SCHEDULER }} ${{ secrets.IGNITED_CHAT_STAGING }}; do
            echo "Cleaning up $IMAGE..."
            FULL_IMAGE_PATH="$IMAGE_BASE/$IMAGE"
            gcloud artifacts docker images list $FULL_IMAGE_PATH               --include-tags --sort-by="~createTime" --format="value(digest)" | tail -n +4 | while read digest; do
              TAGS=$(gcloud artifacts docker tags list $FULL_IMAGE_PATH@$digest --format="value(tag)" || echo "")
              if echo "$TAGS" | grep -qE "latest|previous"; then
                echo "Skipping digest $digest (tagged as latest/previous)"
                continue
              fi
              echo "Deleting digest $digest for $IMAGE..."
              gcloud artifacts docker images delete $FULL_IMAGE_PATH@$digest --quiet || true
            done
          done
