name: Build & Deploy to Cloud Run (Development)

on:
  push:
    branches:
      - gcp-devtest
  workflow_dispatch:
    inputs:
      ROLLBACK:
        description: 'Set to true to roll back to the previous image'
        required: false
        default: 'false'

env:
  IMAGE_BASE: us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO }}
  COMMIT_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: development

    permissions:
      id-token: write
      contents: read

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      # Step 3: Configure Docker to talk to Artifact Registry
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ secrets.ARTIFACT_DOMAIN }}

      # Step 4: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 5: Build services using docker-compose
      - name: Build services
        run: |
          docker-compose build web workers ignitedapi_scheduler

      # Step 6: Tag and push images, manage versions, clean up old ones
      - name: Handle tagging, pushing, and cleanup
        run: |
          SERVICES=(
            "${{ secrets.IGNITEDAPI }}"
            "${{ secrets.IGNITEDAPI_WORKERS }}"
            "${{ secrets.IGNITEDAPI_SCHEDULER }}"
            "${{ secrets.IGNITED_CHAT_STAGING }}"
          )

          CUSTOM_CMDS=(
            ""
            ""
            "node workers/scheduled/poc-warning.js"
            "npm start"
          )

          for index in "${!SERVICES[@]}"; do
            NAME="${SERVICES[$index]}"
            CMD="${CUSTOM_CMDS[$index]}"
            IMAGE="$IMAGE_BASE/$NAME"

            echo "ðŸ”§ Working on $NAME"

            # Build custom CMD-based images if needed
            if [[ -n "$CMD" ]]; then
              echo "Building $NAME with CMD: $CMD"
              docker build -t $NAME . --build-arg CMD="$CMD"
            else
              echo "Using docker-compose image for $NAME"
            fi

            # Step A: Backup current 'latest' as 'previous'
            echo "Checking for existing 'latest' tag..."
            if docker pull $IMAGE:latest 2>/dev/null; then
              docker tag $IMAGE:latest $IMAGE:previous
              docker push $IMAGE:previous
              echo "Tagged $NAME:previous"
            else
              echo "No 'latest' tag found for $NAME, skipping 'previous'"
            fi

            # Step B: Tag and push new image
            echo "Tagging new image"
            docker tag $NAME $IMAGE:latest
            docker tag $NAME $IMAGE:$COMMIT_TAG
            docker push $IMAGE:latest
            docker push $IMAGE:$COMMIT_TAG

            # Step C: Keep only last 3 commit-based tags (skip latest/previous)
            echo "ðŸ§¹ Cleaning up old versions for $NAME"
            TAGS=$(gcloud artifacts docker tags list $IMAGE \
              --sort-by=~TIMESTAMP \
              --format="value(name)" 2>/dev/null | grep -vE 'latest|previous' | tail -n +4 || true)

            for TAG in $TAGS; do
              echo "Removing $TAG"
              gcloud artifacts docker images delete "$TAG" --quiet --delete-tags || true
            done

            echo "Finished processing $NAME"
            echo "------------------------------------------"
          done

      # Step 7: Check if Cloud Run service exists
      - name: Check Cloud Run service
        id: check-run
        run: |
          if gcloud run services describe ${{ secrets.CLOUD_RUN }} \
              --region=${{ secrets.REGION }} \
              --platform=managed; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # Step 8: Roll back to previous version (if manually requested)
      - name: Rollback to previous version (manual)
        if: github.event.inputs.ROLLBACK == 'true'
        run: |
          echo "Manual rollback triggered..."
          for NAME in \
              "${{ secrets.IGNITEDAPI }}" \
              "${{ secrets.IGNITEDAPI_WORKERS }}" \
              "${{ secrets.IGNITEDAPI_SCHEDULER }}" \
              "${{ secrets.IGNITED_CHAT_STAGING }}"; do

            echo "Rolling back $NAME to previous"
            gcloud run deploy ${{ secrets.CLOUD_RUN }} \
              --image $IMAGE_BASE/$NAME:previous \
              --region ${{ secrets.REGION }} \
              --platform managed \
              --quiet || echo "Rollback failed for $NAME (missing 'previous' tag?)"
          done
